# Name of the workflow as it will appear in GitHub Actions tab
name: Web Automation Testing

# Define when this workflow will run
on:
  # Run workflow when code is pushed to main branch
  push:
    branches: [ main ]
  # Run workflow when a pull request is made to main branch
  pull_request:
    branches: [ main ]
  # Allow manual triggering of the workflow from GitHub Actions tab
  workflow_dispatch:

# Define the jobs to run
jobs:
  # Single job called "test"
  test:
    # Specify the type of machine to run the job on
    runs-on: ubuntu-latest
    
    # Define strategy for matrix builds
    strategy:
      matrix:
        # We're using Python 3.9 for this project
        python-version: ['3.9']

    # Steps to execute as part of the job
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v3

    # Step 2: Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Step 3: Install Chrome browser
    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version
    
    # Step 4: Install Chrome WebDriver
    - name: Install Chrome WebDriver
      run: |
        # Get Chrome version number
        CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | awk -F'.' '{print $1}')
        # Get matching ChromeDriver version
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
        # Download and install ChromeDriver
        wget -N "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        unzip chromedriver_linux64.zip
        chmod +x chromedriver
        sudo mv chromedriver /usr/local/bin/
        chromedriver --version

    # Step 5: Install Python dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 6: Create environment configuration file
    - name: Create env file
      run: |
        echo "TEST_ENV=qa" >> .env
        echo "BASE_URL=https://play1.automationcamp.ir/index.html" >> .env
        echo "DEFAULT_TIMEOUT=10" >> .env
        echo "EXPLICIT_TIMEOUT=20" >> .env
        echo "BROWSER=chrome" >> .env
        # Setting headless=True because GitHub Actions runs without GUI
        echo "HEADLESS=True" >> .env

    # Step 7: Run the Behave tests
    - name: Run tests
      run: |
        # Run specific feature file with pretty formatting and JUnit report
        behave features/sample_login.feature -f pretty --junit

    # Step 8: Upload test artifacts (always runs, even if tests fail)
    - name: Upload test results
      if: always()  # This ensures the step runs even if previous steps fail
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        # Specify what to upload
        path: |
          screenshots/  # Test failure screenshots
          reports/     # Test reports
          *.xml       # JUnit XML reports