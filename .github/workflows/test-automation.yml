# Name of the workflow as it will appear in GitHub Actions tab
name: Web Automation Testing

# Define when this workflow will run
on:
  # Trigger workflow on push to main branch
  push:
    branches: [ main ]
  # Trigger workflow on pull requests to main branch
  pull_request:
    branches: [ main ]
  # Allow manual triggering from GitHub Actions UI
  workflow_dispatch:

# Define jobs to be executed
jobs:
  # Main test job
  test:
    # Specify runner environment
    runs-on: ubuntu-latest
    
    # Define build matrix for different configurations
    strategy:
      matrix:
        python-version: ['3.9']

    # Sequential steps to execute
    steps:
    # Step 1: Check out repository code
    - uses: actions/checkout@v3

    # Step 2: Setup Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Step 3: Install Chrome browser
    - name: Install Chrome
      run: |
        # Update package list
        sudo apt-get update
        # Install Chrome stable version
        sudo apt-get install -y google-chrome-stable
        # Verify Chrome installation
        google-chrome --version

    # Step 4: Install Python dependencies
    - name: Install dependencies
      run: |
        # Upgrade pip to latest version
        python -m pip install --upgrade pip
        # Install project dependencies
        pip install -r requirements.txt
        # Ensure webdriver-manager is installed
        pip install webdriver-manager

    # Step 5: Create environment configuration
    - name: Create env file
      run: |
        # Create .env file with test configuration
        echo "TEST_ENV=qa" >> .env
        echo "BASE_URL=https://play1.automationcamp.ir/index.html" >> .env
        echo "DEFAULT_TIMEOUT=10" >> .env
        echo "EXPLICIT_TIMEOUT=20" >> .env
        echo "BROWSER=chrome" >> .env
        # Enable headless mode for CI environment
        echo "HEADLESS=True" >> .env
        # Enable webdriver-manager
        echo "USE_WEBDRIVER_MANAGER=True" >> .env

    # Step 6: Execute test suite
    - name: Run tests
      run: |
        # Add current directory to Python path
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        # Setup virtual display for headless browser
        export DISPLAY=:99
        # Start virtual framebuffer
        sudo Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        # Run Behave tests with JUnit reporting
        behave features/sample_login.feature -f pretty --junit

    # Step 7: Save test results and artifacts
    - name: Upload test results
      # Run this step even if previous steps fail
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        # Specify paths to save
        path: |
          screenshots/    # Test failure screenshots
          reports/       # Test execution reports
          *.xml         # JUnit XML reports