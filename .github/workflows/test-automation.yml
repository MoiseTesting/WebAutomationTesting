# Name of the workflow as it appears in GitHub Actions
name: Web Automation Testing

# Define the events that will trigger this workflow
on:
  # Run on pushes to main branch
  push:
    branches: [ main ]
  # Run on pull requests to main branch
  pull_request:
    branches: [ main ]
  # Allow manual triggering from Actions tab
  workflow_dispatch:

# Add permissions
permissions:
    contents: write    # Required for pushing to gh-pages
    pages: write      # Required for deploying to Pages
    id-token: write   # Required for authentication
    actions: write    # Required for workflow management
    checks: write     # Required for test results
    deployments: write # Required for deployments
    pull-requests: write # Required for PR comments
    statuses: write   # Required for commit statuses

env:
  # Environment variables used by GitHub Pages
  GITHUB_PAGES: true
  SITE_URL: ${{ github.event.repository.html_url }}


# Define the jobs to run
jobs:
  # Main test execution job
  test:
    # Specify the runner environment
    runs-on: ubuntu-latest
    

    # Define steps to be executed
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v3
      with:
       token: ${{ secrets.GITHUB_TOKEN }}


    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Step 3: Install Chrome and WebDriver Manager
    - name: Install Chrome and WebDriver Manager
      run: |
        # Install WebDriver Manager for dynamic ChromeDriver management
        python -m pip install webdriver-manager
        # Use WebDriver Manager to download and setup the correct ChromeDriver version
        python -c "from webdriver_manager.chrome import ChromeDriverManager; print(ChromeDriverManager().install())"


    # Step 4: Install Python dependencies
    - name: Install dependencies
      run: |
        # Upgrade pip to latest version
        python -m pip install --upgrade pip
        # Install project dependencies
        pip install -r requirements.txt

    # Step 5: Create required directories with .gitkeep files
    - name: Create directories
      run: |
        # Create directory for screenshots with .gitkeep
        mkdir -p screenshots
        touch screenshots/.gitkeep
        
        # Create directory for reports with .gitkeep
        mkdir -p reports
        touch reports/.gitkeep
        
        # Create directory for JUnit reports
        mkdir -p junit-reports
        touch junit-reports/.gitkeep

    # Step 6: Create environment configuration
    - name: Create env file
      run: |
        # Set environment variables
        echo "TEST_ENV=qa" >> .env
        echo "BASE_URL=https://play1.automationcamp.ir/index.html" >> .env
        echo "DEFAULT_TIMEOUT=10" >> .env
        echo "EXPLICIT_TIMEOUT=20" >> .env
        echo "BROWSER=chrome" >> .env
        echo "HEADLESS=True" >> .env

    # Step 7: Setup virtual display for headless testing
    - name: Setup display
      run: |
        # Install X virtual framebuffer
        sudo apt-get install -y xvfb
        # Configure display
        export DISPLAY=:99
        # Start virtual framebuffer in background
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &

    # Step 8: Run tests
    - name: Run tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        DISPLAY: :99
        PYTHONUNBUFFERED: 1
      run: |
        # Version info
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
        google-chrome --version

        # Run tests
        behave \
          features/ \
          --format pretty \
          --format json.pretty \
          --outfile reports/behave-report.json \
          --format behave_html_formatter:HTMLFormatter \
          --outfile reports/behave-report.html \
          --junit \
          --junit-directory=reports/junit || true
          
    - name: Upload Downloads
      uses: actions/upload-artifact@v3
      with:
        name: downloaded-files
        path: downloads/

    # Step 9: Debug test results
    - name: Debug test results
      if: always()
      run: |
        echo "=== Test Output Files ==="
        ls -la reports/
        
        echo "=== JSON Content ==="
        if [ -f reports/behave-report.json ]; then
          head -n 20 reports/behave-report.json
        else
          echo "No JSON report found"
        fi
        
        echo "=== HTML Content ==="
        if [ -f reports/behave-report.html ]; then
          ls -la reports/behave-report.html
        else
          echo "No HTML report found"
        fi
        
        echo "=== JUnit Content ==="
        if [ -f reports/junit/TESTS-sample_login.xml ]; then
          cat reports/junit/TESTS-sample_login.xml
        else
          echo "No JUnit report found"
        fi

  

    # Step 10: Generate dashboard
    - name: Generate Dashboard
      if: always()
      run: |
        python .github/scripts/generate_dashboard.py

    

  

    # Step 14: Upload test results
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          screenshots/
          reports/
          junit-reports/
          logs/
        if-no-files-found: warn

    # Step 15: Process test results
    - name: Process test results
      if: always()
      run: |
        for dir in junit-reports reports screenshots; do
          if [ -d "$dir" ]; then
            echo "$dir contents:"
            ls -l "$dir"
          else 
            echo "$dir not found"
          fi
        done