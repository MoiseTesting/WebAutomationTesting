# Name of the workflow as it appears in GitHub Actions
name: Web Automation Testing

# Define the events that will trigger this workflow
on:
  # Run on pushes to main branch
  push:
    branches: [ main ]
  # Run on pull requests to main branch
  pull_request:
    branches: [ main ]
  # Allow manual triggering from Actions tab
  workflow_dispatch:

# Add permissions
permissions:
    contents: write    # Required for pushing to gh-pages
    pages: write      # Required for deploying to Pages
    id-token: write   # Required for authentication
    actions: write    # Required for workflow management
    checks: write     # Required for test results
    deployments: write # Required for deployments
    pull-requests: write # Required for PR comments
    statuses: write   # Required for commit statuses

env:
  # Environment variables used by GitHub Pages
  GITHUB_PAGES: true
  SITE_URL: ${{ github.event.repository.html_url }}


# Define the jobs to run
jobs:
  # Main test execution job
  test:
    # Specify the runner environment
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Define steps to be executed
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v3
      with:
       token: ${{ secrets.GITHUB_TOKEN }}


    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Step 3: Install Chrome browser
    - name: Install Chrome
      run: |
        # Update package list
        sudo apt-get update
        # Install required utilities
        sudo apt-get install -y wget unzip
        # Download Chrome package
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        # Install Chrome
        sudo apt install -y ./google-chrome-stable_current_amd64.deb
        # Verify installation
        google-chrome --version

    # Step 4: Install Python dependencies
    - name: Install dependencies
      run: |
        # Upgrade pip to latest version
        python -m pip install --upgrade pip
        # Install project dependencies
        pip install -r requirements.txt

    # Step 5: Create required directories with .gitkeep files
    - name: Create directories
      run: |
        # Create directory for screenshots with .gitkeep
        mkdir -p screenshots
        touch screenshots/.gitkeep
        
        # Create directory for reports with .gitkeep
        mkdir -p reports
        touch reports/.gitkeep
        
        # Create directory for JUnit reports
        mkdir -p junit-reports
        touch junit-reports/.gitkeep

    # Step 6: Create environment configuration
    - name: Create env file
      run: |
        # Set environment variables
        echo "TEST_ENV=qa" >> .env
        echo "BASE_URL=https://play1.automationcamp.ir/index.html" >> .env
        echo "DEFAULT_TIMEOUT=10" >> .env
        echo "EXPLICIT_TIMEOUT=20" >> .env
        echo "BROWSER=chrome" >> .env

    # Step 7: Setup virtual display for headless testing
    - name: Setup display
      run: |
        # Install X virtual framebuffer
        sudo apt-get install -y xvfb
        # Configure display
        export DISPLAY=:99
        # Start virtual framebuffer in background
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &

    # Step 8: Execute test suite
    - name: Run tests
      env:
        # Set Python path to include project root
        PYTHONPATH: ${{ github.workspace }}
        # Set display for browser
        DISPLAY: :99
        # Enable unbuffered output
        PYTHONUNBUFFERED: 1
      run: |
        # Print Python and Selenium versions for debugging
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
        
        # Print ChromeDriver info
        google-chrome --version
        # Create reports directory structure
        mkdir -p reports/history
        mkdir -p reports/screenshots
        mkdir -p reports/junit
        
        # Run tests with multiple report formats
         behave \
          features/sample_login.feature \
          --format pretty \
          --format json.pretty \
          --outfile reports/behave-report.json \
          --format behave_html_formatter:HTMLFormatter \
          --outfile reports/behave-report.html \
          --junit \
          --junit-directory=reports/junit || true
        
        # Debug: Check test results
        echo "=== Test Results Debug ==="
        echo "Contents of reports directory:"
        ls -la reports/
        
        echo "=== JSON Report Content ==="
        cat reports/behave-report.json || echo "No JSON report found"
        
        echo "=== HTML Report Content ==="
        ls -la reports/behave-report.html || echo "No HTML report found"
        
        echo "=== JUnit Reports ==="
        ls -la reports/junit/ || echo "No JUnit reports found"

        - name: Debug Test Results
        if: always()
        run: |
          echo "=== Test Output Files ==="
          ls -la reports/
          
          echo "=== JSON Content ==="
          echo "First 500 chars of behave-report.json:"
          head -c 500 reports/behave-report.json
          
          echo "=== HTML Content ==="
          echo "First 500 chars of behave-report.html:"
          head -c 500 reports/behave-report.html
          
          echo "=== JUnit Content ==="
          cat reports/junit/TESTS-sample_login.xml

    # Step 9 generate dashboard
    - name: Generate Dashboard
      if: always()
      run: |
       python .github/scripts/generate_dashboard.py

    # Step 10 Configure GitHub Pages
    - name: Setup Pages
      if: always()
      uses: actions/configure-pages@v4

    # Step 11 Upload artifact for deployment
    - name: Upload artifact
      if: always()
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'reports'

    #Step 12 Deploy to GitHub Pages
    - name: Deploy to GitHub Pages
      if: always()
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    # Step 13: Upload test artifacts
    - name: Upload test results
      # Ensure this step runs even if tests fail
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        # Define paths for artifacts
        path: |
          screenshots/     # Test failure screenshots
          reports/        # Behave HTML reports
          junit-reports/  # JUnit XML reports
        # Configure behavior for empty directories
        if-no-files-found: warn

    # Step 14: Process test results (can be expanded)
    - name: Process test results
      # Run this step even if previous steps failed
      if: always()
      run: |
        # Check if JUnit reports exist
        if [ -d "junit-reports" ]; then
          echo "JUnit reports generated successfully"
          ls -l junit-reports/
        fi
        
        # Check if HTML reports exist
        if [ -d "reports" ]; then
          echo "HTML reports generated successfully"
          ls -l reports/
        fi
        
        # Check for screenshots of failures
        if [ -d "screenshots" ]; then
          echo "Test failure screenshots:"
          ls -l screenshots/
        fi